version: 2.1
orbs:
  slack: circleci/slack@5.1.1
  terraform: circleci/terraform@3.4.0
  aws-cli: circleci/aws-cli@5.1.1
  aws-eks: circleci/aws-eks@2.2.0
jobs:
  build_test_publish:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker Image
          command: docker build -t ghcr.io/arinmoyal/weather-webapp:${CIRCLE_BUILD_NUM} ./app
      - run:
          name: Run Docker Image
          command: docker run --rm -d -p 5000:5000 --name webapp-weather ghcr.io/arinmoyal/weather-webapp:${CIRCLE_BUILD_NUM}
      - run:
          name: Test Docker container
          command: |
            sleep 10
            container_ip=$(docker inspect --format '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' webapp-weather)
            echo "Container IP: $container_ip"
            if curl -f http://$container_ip:5000; then
              echo "Test Passed: WebApp successfully responded with HTTP status code 200." > /tmp/test_result.txt
            else
              echo "Test Failed: WebApp failed to respond with HTTP status code 200." > /tmp/test_result.txt
              exit 1
            fi
      - store_test_results:
          path: /tmp/test-result.txt
      - slack/notify:
          channel: '#circle-ci'
          event: always
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*WebApp build test completed for commit $CIRCLE_SHA1*",
                      "emoji": true
                    },
                    {
                      "type": "plain_text",
                      "text": "Test Result: $(cat /tmp/test_result.txt)",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
      - run:
          name: Log in to GitHub Packages
          command: echo "${GITHUB_TOKEN}" | docker login ghcr.io -u ${GITHUB_USERNAME} --password-stdin
      - run:
          name: Push Docker Image to GitLab Container Registry
          command: docker push ghcr.io/arinmoyal/weather-webapp:${CIRCLE_BUILD_NUM}

  checkov:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - run:
          name: Install Checkov
          command: pip install checkov
      - run:
          name: Run Checkov on Terraform files
          command: checkov -d ./terraform

  terratest:
    docker:
      - image: cimg/go:1.23.3
    steps:
      - checkout
      - aws-cli/setup
      - run:
          name: Install OpenTofu
          command: |
            curl -Lo tofu.tar.gz https://github.com/opentofu/opentofu/releases/download/v1.8.5/tofu_1.8.5_linux_amd64.tar.gz
            tar -xzf tofu.tar.gz
            chmod +x tofu
            sudo mv tofu /usr/local/bin/
      - run:
          name: Install dependencies
          command: |
            cd terraform/test
            tofu init
            go mod tidy
      - run:
          name: Run Terratest
          command: |
            cd terraform/test
            tofu init
            go test -v -timeout 30m

  eks_cluster:
    docker:
      - image: cimg/deploy:2024.11.1
      - image: cimg/aws:2024.03.1
    steps:
      - checkout
      - aws-cli/setup
      - run:
          name: Change Directory Into Terraform Directory
          command: cd terraform
      - run:
          name: Initialize Terraform
          command: terraform init
      - run:
          name: Create EKS Cluster
          command: terraform apply -auto-approve

  deploy_argocd:
    docker:
      - image: bitnami/argo-cd:2.13.0
    steps:
      - checkout
      - aws-cli/setup
      - aws-eks/setup
      - run:
          name: Install ArgoCD CLI
          command: |
            curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
            chmod +x argocd
            sudo mv argocd /usr/local/bin/
      - run:
          name: Create Kubeconfig
          command: aws eks update-kubeconfig --region $AWS_DEFAULT_REGION --name webapp-weather-eks-cluster
      - run:
          name: Fetch ArgoCD Password
          command: |
            export ARGOCD_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath='{.data.password}' | base64 -d)
            echo "ARGOCD_PASSWORD=$ARGOCD_PASSWORD" >> $BASH_ENV
      - run:
          name: Fetch ArgoCD API server
          command: |
            kubectl -n argocd patch svc argocd-server -p '{"spec": {"type": "NodePort"}}'
            export ARGOCD_SERVER=$(kubectl get svc argocd-server -n argocd -o jsonpath='{.spec.ports[0].nodePort}')
            export ARGOCD_SERVER=localhost:$ARGOCD_SERVER
            echo "ARGOCD_SERVER=$ARGOCD_SERVER" >> $BASH_ENV
      - run:
          name: Login to ArgoCD
          command: |
            kubectl create namespace argocd || echo "Namespace 'argocd' already exists"
            argocd login $ARGOCD_SERVER --username $ARGOCD_USERNAME --password $ARGOCD_PASSWORD --insecure
      - run:
          name: Add repo to ArgoCD
          command: argocd repo add $REPO --username $GITHUB_USERNAME --password $GITHUB_TOKEN
      - run:
          name: Create app in ArgoCD
          command: |
            argocd app create webapp-weather --repo $REPO --path argocd \
              --dest-server https://kubernetes.default.svc --dest-namespace webapp-weather
      - run:
          name: Sync application for deployment
          command: argocd app sync webapp-weather
      - run:
          name: Enable application auto-sync
          command: argocd app set webapp-weather --sync-policy automated --sync-option

workflows:
  version: 2
  webapp_weather:
    jobs:
      - build_test_publish:
          context: slack-secrets
      - checkov
      - terratest:
          requires:
            - checkov
      - eks_cluster:
          requires:
            - terratest
      - deploy_argocd:
          requires:
            - eks_cluster
